"use strict";(self.webpackChunkotter_shell=self.webpackChunkotter_shell||[]).push([[1902],{3905:(e,a,n)=>{n.d(a,{Zo:()=>m,kt:()=>b});var o=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,o,r=function(e,a){if(null==e)return{};var n,o,r={},t=Object.keys(e);for(o=0;o<t.length;o++)n=t[o],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(o=0;o<t.length;o++)n=t[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=o.createContext({}),i=function(e){var a=o.useContext(d),n=a;return e&&(n="function"==typeof e?e(a):c(c({},a),e)),n},m=function(e){var a=i(e.components);return o.createElement(d.Provider,{value:a},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},p=o.forwardRef((function(e,a){var n=e.components,r=e.mdxType,t=e.originalType,d=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=i(n),p=r,b=s["".concat(d,".").concat(p)]||s[p]||u[p]||t;return n?o.createElement(b,c(c({ref:a},m),{},{components:n})):o.createElement(b,c({ref:a},m))}));function b(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var t=n.length,c=new Array(t);c[0]=p;var l={};for(var d in a)hasOwnProperty.call(a,d)&&(l[d]=a[d]);l.originalType=e,l[s]="string"==typeof e?e:r,c[1]=l;for(var i=2;i<t;i++)c[i]=n[i];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},81189:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>l,toc:()=>i});var o=n(87462),r=(n(67294),n(3905));const t={sidebar_position:45},c="Almacenamiento y redes",l={unversionedId:"Tasks/docker_storage_net",id:"Tasks/docker_storage_net",title:"Almacenamiento y redes",description:"Almacenamiento",source:"@site/docs/Tasks/docker_storage_net.md",sourceDirName:"Tasks",slug:"/Tasks/docker_storage_net",permalink:"/docs/Tasks/docker_storage_net",draft:!1,editUrl:"https://github.com/belennazareth/ottershell/blob/main/docs/Tasks/docker_storage_net.md",tags:[],version:"current",sidebarPosition:45,frontMatter:{sidebar_position:45},sidebar:"tutorialSidebar",previous:{title:"apache2 como proxy inverso",permalink:"/docs/Tasks/proxy_apache2"},next:{title:"Markdown Features",permalink:"/docs/Tasks/markdown-features"}},d={},i=[{value:"Almacenamiento",id:"almacenamiento",level:2},{value:"Vamos a trabajar con vol\xfamenes docker:",id:"vamos-a-trabajar-con-vol\xfamenes-docker",level:2},{value:"1. Crea un volumen docker que se llame miweb.",id:"1-crea-un-volumen-docker-que-se-llame-miweb",level:3},{value:"2. Crea un contenedor desde la imagen php:7.4-apache donde montes en el directorio /var/www/html (que sabemos que es el DocumentRoot del servidor que nos ofrece esa imagen) el volumen docker que has creado.",id:"2-crea-un-contenedor-desde-la-imagen-php74-apache-donde-montes-en-el-directorio-varwwwhtml-que-sabemos-que-es-el-documentroot-del-servidor-que-nos-ofrece-esa-imagen-el-volumen-docker-que-has-creado",level:3},{value:"3. Utiliza el comando docker cp para copiar un fichero index.html (donde aparece tu nombre) en el directorio /var/www/html.",id:"3-utiliza-el-comando-docker-cp-para-copiar-un-fichero-indexhtml-donde-aparece-tu-nombre-en-el-directorio-varwwwhtml",level:3}],m={toc:i},s="wrapper";function u(e){let{components:a,...n}=e;return(0,r.kt)(s,(0,o.Z)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"almacenamiento-y-redes"},"Almacenamiento y redes"),(0,r.kt)("h2",{id:"almacenamiento"},"Almacenamiento"),(0,r.kt)("h2",{id:"vamos-a-trabajar-con-vol\xfamenes-docker"},"Vamos a trabajar con vol\xfamenes docker:"),(0,r.kt)("h3",{id:"1-crea-un-volumen-docker-que-se-llame-miweb"},"1. Crea un volumen docker que se llame miweb."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker volume create miweb\ndocker volume ls\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"root@docker:~#  docker volume create miweb\nmiweb\nroot@docker:~#  docker volume ls\nDRIVER    VOLUME NAME\nlocal     miweb\nroot@docker:~#\n")),(0,r.kt)("h3",{id:"2-crea-un-contenedor-desde-la-imagen-php74-apache-donde-montes-en-el-directorio-varwwwhtml-que-sabemos-que-es-el-documentroot-del-servidor-que-nos-ofrece-esa-imagen-el-volumen-docker-que-has-creado"},"2. Crea un contenedor desde la imagen php:7.4-apache donde montes en el directorio /var/www/html (que sabemos que es el DocumentRoot del servidor que nos ofrece esa imagen) el volumen docker que has creado."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker run -d --name miweb -p 8080:80 -v miweb:/var/www/html php:7.4-apache\ndocker ps\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"root@docker:~# docker run -d --name miweb -p 8080:80 -v miweb:/var/www/html php:7.4-apache\nUnable to find image 'php:7.4-apache' locally\n7.4-apache: Pulling from library/php\na603fa5e3b41: Pull complete \nc428f1a49423: Pull complete \n156740b07ef8: Pull complete \nfb5a4c8af82f: Pull complete \n25f85b498fd5: Pull complete \n9b233e420ac7: Pull complete \nfe42347c4ecf: Pull complete \nd14eb2ed1e17: Pull complete \n66d98f73acb6: Pull complete \nd2c43c5efbc8: Pull complete \nab590b48ea47: Pull complete \n80692ae2d067: Pull complete \n05e465aaa99a: Pull complete \nDigest: sha256:c9d7e608f73832673479770d66aacc8100011ec751d1905ff63fae3fe2e0ca6d\nStatus: Downloaded newer image for php:7.4-apache\nfe5f52e0f6b1dd279f01f08da715ba683427df974749857b018d7d2437a83099\nroot@docker:~# docker ps\nCONTAINER ID   IMAGE            COMMAND                  CREATED          STATUS          PORTS                  NAMES\nfe5f52e0f6b1   php:7.4-apache   \"docker-php-entrypoi\u2026\"   17 seconds ago   Up 16 seconds   0.0.0.0:8080->80/tcp   miweb\nroot@docker:~# \n")),(0,r.kt)("h3",{id:"3-utiliza-el-comando-docker-cp-para-copiar-un-fichero-indexhtml-donde-aparece-tu-nombre-en-el-directorio-varwwwhtml"},"3. Utiliza el comando docker cp para copiar un fichero index.html (donde aparece tu nombre) en el directorio /var/www/html."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker cp index.html miweb:/var/www/html\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},' <!DOCTYPE html>\n <html>\n     <body>\n         <h1>Nombre: Bel\xe9n Nazareth</h1>\n         <h2>Prueba de docker</h2>\n         <img src="https://cataas.com/cat" alt="cat">\n     </body>\n </html>\n\n### 4. Accede al contenedor desde el navegador para ver la informaci\xf3n ofrecida por el fichero index.html.\n\n### 5. Borra el contenedor\n\n### 6. Crea un nuevo contenedor y monta el mismo volumen como en el ejercicio anterior.\n\n### 7. Accede al contenedor desde el navegador para ver la informaci\xf3n ofrecida por el fichero index.html. \xbfSegu\xeda existiendo ese fichero?\n\n\n## Vamos a trabajar con bind mount:\n\n### 1. Crea un directorio en tu host y dentro crea un fichero index.html (donde aparece tu nombre).\n\n### 2. Crea un contenedor desde la imagen php:7.4-apache donde montes en el directorio /var/www/html el directorio que has creado por medio de bind mount.\n\n### 3. Accede al contenedor desde el navegador para ver la informaci\xf3n ofrecida por el fichero index.html.\n\n### 4. Modifica el contenido del fichero index.html en tu host y comprueba que al refrescar la p\xe1gina ofrecida por el contenedor, el contenido ha cambiado.\n\n### 5. Borra el contenedor\n\n### 6. Crea un nuevo contenedor y monta el mismo directorio como en el ejercicio anterior.\n\n### 7. Accede al contenedor desde el navegador para ver la informaci\xf3n ofrecida por el fichero index.html. \xbfSe sigue viendo el mismo contenido?\n\n\n# Redes\n\nDespliegue de Nextcloud + mariadb/postgreSQL\n\nVamos a desplegar la aplicaci\xf3n nextcloud con una base de datos (puedes elegir mariadb o PostgreSQL) (NOTA: Para que no te de errores utiliza la imagen mariadb:10.5). Te puede servir el ejercicio que hemos realizado para desplegar Wordpress. Para ello sigue los siguientes pasos:\n\n### 1. Crea una red de tipo bridge.\n\n### 2. Crea el contenedor de la base de datos conectado a la red que has creado. La base de datos se debe configurar para crear una base de datos y un usuario. Adem\xe1s el contenedor debe utilizar almacenamiento (vol\xfamenes o bind mount) para guardar la informaci\xf3n. Puedes seguir la documentaci\xf3n de mariadb o la de PostgreSQL.\n\n### 3. A continuaci\xf3n, siguiendo la documentaci\xf3n de la imagen nextcloud, crea un contenedor conectado a la misma red, e indica las variables adecuadas para que se configure de forma adecuada y realice la conexi\xf3n a la base de datos. El contenedor tambi\xe9n debe ser persistente usando almacenamiento.\n\n### 4. Accede a la aplicaci\xf3n usando un navegador web.\n')))}u.isMDXComponent=!0}}]);